리스트(list): 우리들이 자료를 정리하는 방법 중 하나.
우리들은 일상 속에서 자료를 목록을 정해서 기록하고 관리한다.
리스트의 항목은 순서나 위치를 가진다. 
스택과 큐도 넓게 보면 리스트의 일종이라고 볼 수 있다.
리스트는 집합과는 다르기 때문에 항목간의 우선 순위가 있다.
=> 집합은 우선 순위가 없다.

List(item1,item2,item3...)

리스트를 가지고 할 수 있는 연산은 다음과 같다.
1. 리스트에 새로운 항목을 추가한다.(삽입)
2. 리스트에서 항목을 삭제한다.(삭제)
3. 리스트에서 특정한 항목을 찾는다.(탐색)

리스트 ADT
객체: n개의 element 형으로 구성된 순서 있는 모임
연산{
    insert(list,pos,item) ::= 리스트의 특정 위치에 요소 삽입
    insert_last(list,item) ::= 리스트의 맨 끝에 요소 삽입
    insert_first(list,item) ::= 리스트의 맨 처음에 요소 삽입
    delete(list,pos) ::= 리스트의 특정 위치에 요소 삭제
    clear(list) ::= 리스트의 모든 요소 제거
    get_entry(list,pos) ::= pos 위치에 요소 반환
    get_length(list) ::= 리스트의 길이를 구함
    is_empty(list) ::= 리스트가 비었는지 판단
    is_full(list) ::= 리스트가 가득 차있는지 판단
    print_list(list) ::= 리스트의 모든 요소를 표시
}

//특정 위치에 삽입하거나 앞과 뒤에 바로 삽입할 수 있다.
//특정 위치에 요소를 삭제한다.
//모든 요소를 제거한다. 등..

-리스트의 구현
리스트도 배열과 연결 리스트를 이용하여 구현할 수 있다.
배열을 이용하면 가장 간단하게 구현할 수 있는데 크기가 고정된다는 단점이 있다.
또 다른 방법은 포인터를 이용해서 연결 리스트를 만드는 방법이다. 
필요할 때마다 중간에 포인터를 추가해서 사용할 수 있어서 크기 제한이 없다.

배열로 구현 시 장점 - 간단하고 속도가 빠르다.
단점 - 크기가 고정된다. , 리스트 중간에 삽입시 모든 요소를 1칸씩 옮겨야 한다.

연결리스트로 구현 시 장점 - 크기가 제한되지 않고 중간에 쉽게 삽입,삭제를 할 수 있다.
단점 - 구현이 복잡하며, 임의의 위치에 있는 항목을 추출할 때는 배열보다 시간이 오래 걸린다.

우선 배열로 구현하게 되면 메모리 공간이 순차적으로 할당된다.
따라서 리스트의 순차적 표현이라고 한다. 배열을 사용해서 구현해보자.


-연결리스트
다음은 동적으로 크기가 변할 수 있고 삭제나 삽입 시 데이터를 이동할 필요가 없는
연결된 표현에 대해 알아보자. 연결된 표현은 포인터를 사용하여 데이터들을 연결한다.
이러한 표현은 리스트의 구현에만 사용되지 않고 다른 여러 자료구조 구현시에도 사용된다.

배열에서는 삽입을 할 때 해당 요소를 넣을 칸을 만들기 위해 요소들을 한 칸씩 옮겨줘야 했다.
연결리스트에서는 단순히 해당 요소의 앞과 뒤를 연결만 시켜주면 된다.
삭제시에도 동일하다. 해당요소의 연결을 끊고 해당요소의 앞과 뒤를 연결해주면 된다.
하나의 프로그램 안에는 동시에 여러 개의 연결 리스트가 존재할 수 있다.
연결 리스트를 구별하는 첫 번째 데이터를 따라가면 나머지 데이터들을 얻을 수 있다.
또 하나의 장점은 연결 리스트의 공간이 필요할 때마다 동적으로 만들어서 쉽게 추가가 가능하다는 점이다.
단점은 i번째 데이터를 찾으려면 앞에서부터 순차적으로 접근해야 한다는 점이다.
추가를 할 때 동적할당을 해주고, 삭제를 할 때 메모리 해제를 꼭 해준다.
또한 모든 작업이 끝났다면 종료전에 동적할당된 메모리를 모두 해제 해준다.

head -> □ -> □ -> □ -> □
        10   20   30   40

연결된 표현은 줄로 연결된 상자라고 할 수 있다.
상자 안에는 데이터가 들어가고 상자에 연결된 줄을 따라가면 다음 상자를 찾을 수 있다.
데이터들은 메모리 상에 여기저기 흩어져 존재할 수 있는데 이러한 자료들을 서로 연결하여
하나로 묶는 방법을 연결 리스트 라고 한다. 연결하는 줄은 포인터로 구성된다.

컴퓨터에서는 이러한 상자들을 Node라고 부른다. 연결리스트는 이 노드들의 집합이다.
노드들은 메모리의 어떤 위치에나 있을 수 있고 다른 노드로 가기 위해 현재 노드의 포인터를
이용하면 된다는 것이다.

노드는 data field와 link field로 구성된다. data에는 말그대로 값이 들어가며
link에는 다른 노드를 가리키는 포인터가 들어간다.

연결리스트에서는 연결리스트의 첫 번째 노드를 알아야 전체 노드에 접근이 가능한데.
이러한 첫 번째 노드를 가리키는 포인터 변수를 head pointer라고 한다.
또한 마지막 노드의 링크 필드는 NULL로 설정된다. 이는 더 이상 연결된 포인터가 없다는 의미가 된다.
연결리스트들의 노드들은 필요할 때마다 malloc을 통해 동적으로 생성한다.

-연결리스트의 종류
1. 단순 연결 리스트(단방향 연결 리스트)
맨 끝이 NULL을 가리키는 것이 특징이다.

2. 원형 연결 리스트
단방향이긴 하나 맨 끝이 NULL이 아닌 HEAD를 가리킨다. 즉, 다시 원점으로 돌아온다.

3. 이중 연결 리스트(양방향 연결 리스트)
노드마다 각 2개의 링크가 존재하여 이전으로도 이후로도 양방향으로 이동이 가능하다.
끝은 NULL을 줄 수도. HEAD를 줄 수도 있어 자유롭게 사용 가능하다.



