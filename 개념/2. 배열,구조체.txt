배열(Array): 대부분의 프로그래밍 언어에서 기본적으로 제공되는 데이터 타입으로
많은 자료구조들이 이 배열을 사용하여 구현된다. 배열은 동일한 타입의 데이터를 한 번에
여러 개 만들 때 사용한다.

대량의 데이터에서 인접한 요소들을 교환할 때 서로 다른 여러개의 개별변수를 사용하면
매번 다른 이름을 사용하기 때문에 많은 불편이 따를 것이다. 배열을 사용하면 연속적인 메모리공간이 할당되고
인덱스 번호를 통해 쉽게 접근이 가능하다.

배열을 ADT로 나타내면 다음과 같다.

객체: 배열(값들의 집합)
연산: n개 요소의 배열생성, 배열의 특정요소값 가져오기, 배열의 특정요소값 쓰기
create(SIZE), get(array,i), set(array,i,value)

배열에서 base(기본주소)는 0번요소이며 배열의 이름으로도 접근 가능하다.
list라는 크기 6의 배열이 있다면 list[i]를 통해 주소 base+i*sizeof(int) 에 해당하는
값을 가져온다.

2차원배열은 요소들이 2차원 테이블 형태로 나열된 배열로 가로를 row, 세로를 column이라고 한다.
2차원 배열에서 row는 column을 가리키는 주소로도 볼 수 있다.

배열을 응용하면 행렬연산이나 다항식연산등을 처리할 수 있다. 

구조체(structure): 다양한 타입 데이터들의 집합이다. 배열이 같은 타입의 데이터를 묶었다면
구조체는 타입이 다른 데이터를 묶는데 사용한다. 물론 같은 것도 묶을 수 있다.

C에서는 struct라는 키워드로 접근한다.

struct 구조체명{
    데이터
};

구조체 변수 선언은 struct 구조체명 변수명; 과 같이 선언한다.

typedef로 별칭을 만들어 줄 수도 있다.

typedef struct _구조체명{
    데이터
}별칭

이렇게 typedef로 짓게되면 두가지방식으로 선언이 가능하다.
struct _구조체명 변수명 혹은 별칭 변수명과 같이 선언한다.

구조체 안에 데이터를 사용하려면 '변수명.데이터' 와 같이 접근이 가능하다.
문자열을 할당하는 경우에는 선언과 동시에 초기화해주지 않으면 대입연산자(=)로 할당이 불가능하기에 
strcpy와 같은 함수를 통해 할당이 가능하다.

구조체를 사용하게되면 좋은점은 배열을 파라미터로 넘길 때 주소,포인터를 넘기기 때문에 헷갈리지만
구조체로 넘기면 굳이 주소가 아닌 CALL by value를 할 수 있다.

배열과 구조체를 이용하면 여러가지 연산을 해결할 수 있는데

먼저 다항식 연산부터 보자

다항식 연산을 위한 첫 번째 방법은 하나의 식에 1개의 구조체를 갖는 차수와 
배열로 계수를 지정하는 구조체를 만들어 줄 수 있다.
struct{
    int degree;
    double coef[SIZE]; 
}

두 번째 방법은 계수가 0인 항은 표시하지 않는 차수와 계수로 이루어진 구조체 배열을 지정하는 방법이다.
struct{
    double coef;
    int degree;
}term[size];

struct term[size] = {{0,1},{3,4}}; 
이렇게 하게 되면 구조체 배열로 좌표형태의 다항식을 표현가능하다.

다음은 행렬연산에 사용할 수도 있다.
행렬(matrix)은 자연과학에서 많은 문제를 해결하는데 사용하는데 행렬을 
가장 기본적으로 2차원 배열을 이용해서 구현할 수 있다.
int matrix[row][col];
하지만 요소중에 0이 많은 희소행렬같은 경우에는 메모리 낭비가 심하게 된다.
또 크기가 너무 큰 희소행렬의 경우에는 컴파이럴에 따라 사용을 못할 수도 있다.

그렇다면 이러한 희소행렬을 나타낼 때 좋은 방법은 0이 아닌 노드만을 나타내는 방법이다.
배열로 행열 순서를 이용해 0이 아닌 값만을 넣는 방법이 있다.

방법1은 전통적으로 
230
801
021
처럼 2차원 2,2 배열로 나타낸 것이고

방법2는 0이 아닌 노드만을 행,열,값으로 표시하는 것이다.
002
013
108
121
212
221
이렇게 말이다.

그렇다면 방법1과 방법2중 어떤 것이 우수할까? 각 방법은 나름마다 장단점이 있다.

방법1의 경우 전치행렬(transpose_matrix)를 구한다면 그냥 행과 열의 값만 서로 바꿔주면 된다.
그러나 방법2의 경우는 상당한 고민이 필요하다. 방법2는 행과 열의 값만 바꿔주게되면
행열 순서대로 표시하기가 어렵다. 그런데 이는 전치행렬의 특성을 생각해보면 된다.
행과 열을 바꾸게 되어있다. 0열에서 n열까지 반복을 하고 i열일 때 항에서 
행열 교체를 해주면 행열 순서대로 쌓이게 될 것이다.

scanf쓸 때 %s => %[^\n]s or %[^\n] 라고 해주면 개행문자 전까지만 받는다.