배열(Array): 대부분의 프로그래밍 언어에서 기본적으로 제공되는 데이터 타입으로
많은 자료구조들이 이 배열을 사용하여 구현된다. 배열은 동일한 타입의 데이터를 한 번에
여러 개 만들 때 사용한다.

대량의 데이터에서 인접한 요소들을 교환할 때 서로 다른 여러개의 개별변수를 사용하면
매번 다른 이름을 사용하기 때문에 많은 불편이 따를 것이다. 배열을 사용하면 연속적인 메모리공간이 할당되고
인덱스 번호를 통해 쉽게 접근이 가능하다.

배열을 ADT로 나타내면 다음과 같다.

객체: 배열(값들의 집합)
연산: n개 요소의 배열생성, 배열의 특정요소값 가져오기, 배열의 특정요소값 쓰기
create(SIZE), get(array,i), set(array,i,value)

배열에서 base(기본주소)는 0번요소이며 배열의 이름으로도 접근 가능하다.
list라는 크기 6의 배열이 있다면 list[i]를 통해 주소 base+i*sizeof(int) 에 해당하는
값을 가져온다.

2차원배열은 요소들이 2차원 테이블 형태로 나열된 배열로 가로를 row, 세로를 column이라고 한다.
2차원 배열에서 row는 column을 가리키는 주소로도 볼 수 있다.

배열을 응용하면 행렬연산이나 다항식연산등을 처리할 수 있다. 

구조체(structure): 다양한 타입 데이터들의 집합이다. 배열이 같은 타입의 데이터를 묶었다면
구조체는 타입이 다른 데이터를 묶는데 사용한다. 물론 같은 것도 묶을 수 있다.

C에서는 struct라는 키워드로 접근한다.

struct 구조체명{
    데이터
};

구조체 변수 선언은 struct 구조체명 변수명; 과 같이 선언한다.

typedef로 별칭을 만들어 줄 수도 있다.

typedef struct _구조체명{
    데이터
}별칭

이렇게 typedef로 짓게되면 두가지방식으로 선언이 가능하다.
struct _구조체명 변수명 혹은 별칭 변수명과 같이 선언한다.

구조체 안에 데이터를 사용하려면 '변수명.데이터' 와 같이 접근이 가능하다.
문자열을 할당하는 경우에는 선언과 동시에 초기화해주지 않으면 대입연산자(=)로 할당이 불가능하기에 
strcpy와 같은 함수를 통해 할당이 가능하다.

구조체를 사용하게되면 좋은점은 배열을 파라미터로 넘길 때 주소,포인터를 넘기기 때문에 헷갈리지만
구조체로 넘기면 굳이 주소가 아닌 CALL by value를 할 수 있다.