객체(Objects): 데이터들의 집합(자료형)
연산(functions): 데이터를 가지고 할 수 있는 행위들의 집합(객체의 함수) 

추상화: 어떤 시스템의 간략화된 기술 혹은 명세로서 
시스템의 정말 핵심적인 구조나 동작에만 집중을 해서 만듬.

ADT(추상자료형): 연산이 무엇을 하는지는 드러나지만 어떻게 구현할 것인가는
정의하지 않은 형태

어떻게 구현할 것인가? -> 알고리즘

ADT = 객체 + 연산

자료형(Datetype){
    (char,int,float,double),
    (파생자료형: 배열, 포인터),
    (사용자 정의: 구조체, 공용체, 열거형)
}

C언어에서 구조체는 데이터들의 집합형, 데이터들은 각자의 메모리 공간을 갖음
반면, 공용체는 마찬가지로 데이터들의 집합이지만 메모리 공간을 공유함.
따라서 공용체의 메모리크기는 가장 큰 자료형의 메모리공간 크기와 동일함.

열거형은 자료를 순차대로 열거하는 형태를 갖을 때 사용하는 자료형으로
정해져 있는 상수를 표현할 때 코드에 이름을 붙여 이해하기 쉽게 하는데 있다.

ADT로 돌아와서 ADT는 데이터나 연산이 무엇인지 정의되지만 
데이터나 연산을 어떻게 구현할 것인지는 정의되지 않는다.

ADT의 형태를 간략하게 예시를 들어본다.
사칙 연산과 논리를 판단하는 프로그램이라고 하자.

데이터(객체)는 0 ~ INT_MAX까지의 순서화된 정수의 부분범위다.
다음은 연산(함수)이다.
Anytype zero() ::= return 0
0을 반환하는 연산이다.
Anytype successor(x) ::= if(x==INT_MAX) return x
                else return x+1
다음은 순차적인 계승을 표현한 연산이다.
Boolean is_zero(x) ::= if(x) return FALSE
                      else return TRUE
불타입으로 값이 0인지 판단한다.
Boolean equal(x,y) ::= if(x==y) return TRUE
                      else return FALSE
불타입으로 두 값이 같은지 판단한다.
Anytype add(x,y) ::= if((x+y)<= INT_MAX) return x+y
                    else return INT_MAX
두 값을 합연산하는 함수다.
Anytype sub(x,y) ::= if(x<y) return 0
                    else return x-y
두 값을 차연산하는 함수다.

이처럼 연산을 정의할 때 연산의 이름과 매개 변수, 반환형은 정의를 하지만
연산을 구현하는 구체적인 코드는 구현하지 않는것이 ADT이다.
추상코드에서느 ::= 기호는 '~으로 정의된다' 라는 의미다.

객체지향 언어에서의 ADT는 '클래스'라는 속성으로 구현되고 연산은
클래스의 멤버함수로 구현된다. 또한 private나 protected라는 키워드로
내부 자료의 접근을 막을 수 있다.

절차지향 언어에서는 데이터 선언과 함수의 선언으로 비슷한 역할을 하는 것으로 본다. 