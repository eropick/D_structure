컴퓨터에서 프로그램이 실행될 때 사용되는 데이터들은 메모리에 적재되는데
TEXT영역, DATA영역, HEAP영역, STACK영역으로 구분된다.

그 전에 메모리를 보면 32bit,64bit가 있다고 하자.
32bit운영체제에 맞는 프로그램, 64bit운영체제에 맞는 프로그램이 있다.
메모리 한 칸은 1byte의 크기를 갖으며 32bit운영체제는 4byte 길이의 주소를 갖는다.
메모리 한 칸은 1byte의 크기를 갖으며 64bit운영체제는 8byte 길이의 주소를 갖는다.
크기는 집 한평을 의미하고 이 집 주소가 32자리로 표기된다는 의미다.
0과 1로 표기가 가능하므로 표기할 수 있는 경우의 수는 2^32이다.
즉, 2^32개의 주소를 표기할 수 있다. 1byte크기의 메모리가 2^32개 주소를 표기할 수 있으므로
메모리의 최대 크기는 1byte*2^32 = 2^32byte = 4GB가 된다. 32bit운영체제를 돌리는데  
필요한 메모리 공간이 4GB를 넘어서지 못하는 이유가 여기에 있다. 그 이상 설치해도 활용할 수가 없다.

운영체제가 32bit인 경우 주소를 나타내는 포인터의 크기는 (32bit)4byte로 되어있지만
운영체제가 64bit인 경우 주소를 나타내는 포인터의 크기는 (64bit)8byte로 표기가 된다.
항상 메모리 하나의 크기는 1byte라는 것과 운영체제의 bit수에 따른 주소길이를 갖는다는 것을 명심하자.

TEXT영역에는 제어문,상수,함수 등의 명령문들이 저장된다.
코드 영역이라고도 불리며 const로 시작하는 상수들과 
정의된 함수의 코드가 저장되는 곳이다. 
가장 낮은 주소에 할당된다.
const int a = 10;
int function(){
    return 1;
}

DATA영역에는 프로그램 실행 전인 전역(global)변수, 정적(static)변수 등이 저장된다.
크게 초기화 된 변수영역과 초기화 되지 않은 변수영역으로 나뉜다.
main함수전에 선언된 변수들.
int global; //초기화되지 않은 전역변수
int global2 = 10; //초기화된 전역변수
static int statics = 11; //정적변수 (정적변수는 함수를 종료해도 사라지지 않고 유지된다.)
=> 바로 저장되는 영역이 다르기 때문이다.
주소의 위치는 TEXT보단 크고 HEAP보단 작다.
초기화 된 변수들이 더 낮은 위치에 할당되고, 초기화가 안 된 변수들이 그 위에 할당된다. 

HEAP영역에는 동적으로 할당되는 변수들이 저장된다. java나 c++과 같은 객체지향언어에서
사용하는 new/delete라는 개념과 class,참조변수 절차지향인 C의 malloc/free 과 같은 동적할당의 영역이다.
언어마다 상이하기 때문에 동적할당된 변수들이 저장되는 공간으로 보면 된다.
상대적으로 DATA나 TEXT보다 높은 주소에서 시작하지만 STACK영역보다 한없이 작은 주소부터 적재된다.
int* p = (int*)malloc(sizeof(int));

STACK영역은 함수들이 호출될 때 함수에 포함되어 있는 지역변수나 매개변수들, 복귀주소가 저장되는 공간이다.
함수들이 호출될 때 지역변수와 매개변수들이 시스템 스택에 저장되고 종료시에 메모리가 해제된다.
연속적인 재귀 호출을 하게 되면 계속 스택에 쌓이게 되는데 어느 순간 스택 메모리영역을 벗어나면
STACK Overflow가 발생한다. 
int function(int a){
    int result;
}
main함수 안 또는 함수안에서 선언된 지역변수들(int a, int result, 함수의 종료시 복귀주소)

이 영역들은 할당되는 주소의 차이점이 있는데 TEXT영역과 DATA영역은 비교적 낮은 주소에 저장되는 반면,
HEAP영역과 STACK영역은 비교적 높은 주소에 저장이 된다. 또한 HEAP영역은 낮은 곳에서 높은 곳으로
메모리가 할당되는 반면, STACK영역은 높은 곳에서 낮은 곳으로 메모리가 할당된다.

buffer Overflow
보통 버퍼는 데이터를 보내기 위한 일시적인 메모리 공간을 의미하는데
어떤 값을 입력받거나 전송할 때의 임시로 저장되는 공간-버퍼를 의미한다.
stack과 heap은 프로그램이 실행되면서 대부분의 데이터들이 저장되는 대표적인 영역인데
overflow를 일으켜 인접한 데이터 영역을 침범하여 코드를 수정할 수 있는 등의 보안 위협이 있다.
이러한 메모리 영역 침범도 있지만 변수의 크기를 넘어가는 경우도 overflow라고 한다.
즉, overflow의 종류로 buffer,stack,heap등 메모리 영역, 데이터 버퍼의 overflow가 있다.

STACK overflow는 stack영역을 넘어가버리는 것을 의미한다.
stack에는 지역변수와 매개변수, 함수의 복귀주소 등이 저장된다고 했고,
함수를 호출할 때 스택에 저장된다. 재귀 호출을 정지코드 없이 무한으로 하게 된다면
stack영역에 무한히 쌓여가게 될 것이고 주소가 높은 곳에서 낮은 곳으로 가기 때문에
할당된 stack영역을 넘어가버리는 overflow가 발생하게 된다.

HEAP overflow는 heap영역을 넘어가버리는 것을 의미한다.
주로 매우 큰 데이터를 생성할 경우 발생한다. 큰 배열을 만들면 쉽게 overflow가 된다.
2,147,483,647 라는 int의 최대 크기를 배열의 크기로 지정한다. 4byte영역 int공간을
저정도 생성하면 방대한 량의 데이터 공간이 만들어진다. 그렇게 되면 heap영역을 벗어난다.

