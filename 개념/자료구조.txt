주어진 문제를 풀기 위해서는?
데이터(자료)가 있어야 하며 이를 체계적으로 정리해두면 나중에 찾기 쉬워짐 => 자료구조
데이터(자료)를 가지고 어떻게 연산할까? => 알고리즘

다수의 데이터들은 어떠한 관계를 갖고있는데 이를 어떻게 구조화 할지 
학습하는 것이 자료구조를 배우는 것.

일반적으로 자료구조란 자료를 쌓아서 정리하는 구조를 말하고 컴퓨터에서는
여러 가지의 방법으로 자료구조가 만들어졌는데 이는 다음과 같다.

1. 그릇을 쌓아서 보관 == 스택
1|2|3|4|5|6|7 이런식으로 순차적으로 쌓고 뺄때는 맨 위부터 뺀다.

2. 마트 계산대의 줄 == 큐
스택처럼 1|2|3|4|5 이렇게 쌓이지만 빠지는건 먼저들어온 선착순으로 빠진다.

3. 버킷 리스트 == 리스트
말 그대로 목록을 의미한다. 1|2|3|4|5 이런식으로 순차적으로 기록되며
원하는 지점으로 이동해서 값을 빼내온다.

4. 컴퓨터 디렉토리 구조 == 트리
1| 1-1//1-2 | 1-1-1 // 1-1-2 // 1-1-3 || 1-2-1
1에서 파생된 1-1과 1-2가 있고 1-1에서 파생된 1-1-1~3이 있다. 
이런식의 부모로부터 파생되어 자식이 생기는 구조를 의미한다.

--------------------------------------------------------------------------------------
이렇게 자료가 저장된 방법(자료구조)이 결정됨에 따라 그 구조에서의 알고리즘이 결정된다.

컴퓨터 프로그램 = 자료구조 + 알고리즘 
데이터 처리는 자료구조를 사용해 저장되며 
이 문제를 해결하기 위한 단계적 절차는 알고리즘

1. 문제 해결 방법 고안
2. 컴퓨터가 어떻게 '단계적'으로 수행을 할지 생각함.
컴퓨터로 문제를 풀기 위한 단계적 절차 - 알고리즘
=> 특정한 일을 수행하는 명령어의 집합이지만
문제 해결 방안을 장치가 이해할 수 있는 언어로 기술한 것을 의미
모든 명령어의 집합이 알고리즘이 되는 것은 아니며 다음의 조건들을 만족해야 한다.

입력: 0개 이상의 입력 존재(없어도 됨)
출력: 1개 이상의 출력 존재(꼭 1개는 있어야 됨)
명백성: 동작의 의미가 명확
유한성: 특정 동작 후 반드시 종료
유효성: 해당 플랫폼으로 실행 가능한 것이어야 함.

알고리즘 기술방법
{
    1. 자연어(영어,한국어 등)
    2. 흐름도(순서도)flowchart
    3. 의사코드(Pseudo-code)슈도 코드
    4. 프로그래밍 언어(C,JAVA 등)
}