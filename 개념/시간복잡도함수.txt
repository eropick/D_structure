시간 복잡도 함수T(n)에 대한 이해

양의 정수 n을 n번 더하는 프로그램에 대해 생각해보자.

간단하게 n*n의 sum = n*n 곱셈형태로 표현할 수 있을 것이고,

말그대로 n을 n번 더하는 즉,n을 더하는 행위를 n번 반복하는 형태
for i<=n sum += n 와 같이 표현할 수 있을 것이며,

1을 n*n번 더하는 형태
for i<=n*n sum++ 와 같이 표현할 수 있을 것이다.

가장 효율적인 알고리즘을 선택하기 위해 알고리즘 분석기법을 사용해서 수행속도를 예측한다.
간단한 분석을 위해 루프 제어 연산은 제외시키고 구한다. 대체적으로 이것들이 속도에 대한 결론에
큰 영향을 끼치지 않는다.

대입,덧셈,곱셈,나눗셈 4개의 연산을 보자
1번의 경우 곱셈이 1회 대입이 1회 있으므로 2라는 연산수를 갖는다.
2번의 경우 덧셈이 n회 대입이 n회 있으므로 2n이라는 연산수를 갖는다.
3번의 경우 덧셈이 n*n회 대입이 n회 있으므로 2n^2이라는 연산수를 갖는다.

연산마다 시간이 좀 더 걸리기는 할 것이지만 모든 연산이 동일한 시간이 걸렸다고 가정하면
알고리즘을 서로 비교할 수 있다. 하나의 연산이 t만큼 걸린다고 하면 
1은 2t의 시간, 2는 2nt의 시간, 3은 2tn^2의 시간이 걸린다.

#빅오 표기법
일반적으로 입력의 개수 n과 시간 복잡도 함수 T(n)의 관계는 상당히 복잡할 수 있다.
하지만 자료의 개수가 많은 경우에는 차수가 가장 큰 항이 가장 영향을 크게 미치고
다른 항들은 상대적으로 무시될 수 있다.

T(n) = n^2 + n + 1 이라고 해보자
n = 1000일 때 T(n)의 값은 1,001,001이고 첫 번째 항의 값 1,000,000이 전체 값의 약 99%에 해당한다.
따라서 입력 자료의 개수가 큰 경우에는 차수가 가장 큰 항이 전체의 값을 주도한다.
복잡도 함수에서 중요한 것은 n이 증가하엿을 때에, 연산의 총횟수가 n에 비례하여 증가하는지
아니면 n^2에 비례하여 증가하는지 아니면 다른 증가추세를 더 가지는지가 중요하다.

for i=0/ i<=n/ ++i 하나의 루프문에는 1번의 대입연산, n+1회의 비교연산, n개의 덧셈연산을 포함한다.
따라서 3n+1의 추가적인 연산이 있으나 n이 커지게 되면 5n이나 2n의 차이는 미미하다.
중요한 것은 n에 정비례한다는 점이다.

시간 복잡도 함수에서 불필요한 정보를 제거하여 알고리즘 분석을 쉽게 할 목적으로 시간 복잡도를
표시하는 방법을 빅오 표기법이라고 한다. 알고리즘이 n에 비례하는 수행시간을 갖는다고 말하는 대신
시간복잡도가 O(n)이라고 표기한다. O(n)은 "Big o of n" 이라고 읽는다.

빅오 표기법의 수학적 정의다.
두 개의 함수 f(n)과 g(n)이 있을 때 모든 n>n0에 대하여 |f(n)|<=c|g(n)|을 만족하는 
두 개의 상수c와 n0가 존재하는 경우 f(n)= O(g(n)) 이다. 

f(n) = 5 => O(1) #c가 10이고 n0가 1만 되어도 충분히 된다.
f(n) = 2n+1 => O(n) #c가 3이고 n0가 2라면 n>2 일 때 충분히 값이 나온다.
f(n) = n^2 + 3n + 2 => O(n^2) 
f(n) = 2^n + n^2 + 1 => O(2^n)

마찬가지로 나머지도 c와 n0를 넣어서 커질 수 있기 때문에 보통 상한값을 표기해서 빅오를 구한다.
쉽게 구하는 방법은 다항식의 최고차항만을 남기고 나머지는 버리는 것이다.

단, log n의 경우에 차수를 갖기 때문에 확인하고 없애야 된다.

수행시간의 비교다.
O(1)<O(logn)<O(n)<O(n*logn)<O(n^2)<O(n^2*logn)<O(n^3)<O(2^n)<O(n!)

하지만 빅오 표기법에서 f(n) = 2n + 1 이라고할 때 
O(n)이라고 할 수도 있지만, 상한으로 O(n^2)이라고도 할 수 있다.
상한이 여러 개가 존재할 수 있기 때문에 이를 보완하기 위해 
빅오메가와 빅세타 표기법이 나왔다.

빅오메가는 하한을 표시하고, 빅세타는 상한과 하한을 만들 수 있는 경우로 표기한다.
빅세타 표기법은 하한과 상한을 정해서 더 정밀하지만 통상적으로 빅오표기법을 많이 사용한다.
이 때 빅오표기법은 최소차수로 상한을 표시함을 명심하자.

